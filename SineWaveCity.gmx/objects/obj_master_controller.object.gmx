<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>paused = false;
screenShot = -1;

enum paused_menu_states {
  resume,
  exit_to_menu
}

var gp_num = gamepad_get_device_count();

global.gamepad_connected = false;

for (var i = 0; i &lt; gp_num; i++;)
{
   if gamepad_is_connected(i) {
      global.gamepad_connected = true
   }
}

current_state = paused_menu_states.resume;
global.points = 10;
global.max_railgun_recharge = 26;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var gp_num = gamepad_get_device_count();

global.gamepad_connected = false;

for (var i = 0; i &lt; gp_num; i++;)
{
   if gamepad_is_connected(i) {
      global.gamepad_connected = true
   }
}



if(keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0,gp_start) || (!global.gamepad_connected &amp;&amp; !paused)){
    paused = !paused;

    if(!sprite_exists(screenShot)){
        screenShot = sprite_create_from_surface(application_surface,0,0,view_wport,view_hport,0,0,0,0);    
    }

if(paused){
    instance_deactivate_all(1);
    audio_pause_all();
    if !global.gamepad_connected {
        controller = instance_create(50,200,obj_gamepad_diagram);
    }
    resume = instance_create(200,200, obj_resume);

    exit_to_menu = instance_create(250,400,obj_exit_to_menu);

    obj_resume.visible = true;
    obj_resume.image_index=1;
    obj_exit_to_menu.visible = true;
}else{
    instance_destroy(obj_resume);
    instance_destroy(obj_exit_to_menu);
    instance_destroy(obj_gamepad_diagram);
    
    if(sprite_exists(screenShot)){
        sprite_delete(screenShot);
    }
    instance_activate_all();
    audio_resume_all();
}
}

if (paused &amp;&amp; instance_exists(obj_resume) &amp;&amp; instance_exists(obj_exit_to_menu)) {

var left_axis = gamepad_axis_value(0, gp_axislv);

if (left_axis &lt; -0.33 || left_axis &gt; 0.33) &amp;&amp; global.state_change_debounce &lt; 0 {
  if (left_axis &lt; -0.05) {
    current_state += 1;
  }

  if (left_axis &gt; 0.05) {
    current_state += 1;
  } 
     
  obj_resume.image_index = 0;
  obj_exit_to_menu.image_index = 0;

  current_state = current_state % 2;
  if (current_state == paused_menu_states.resume) {
    obj_resume.image_index = 1;
  } else if (current_state == paused_menu_states.exit_to_menu ){
    obj_exit_to_menu.image_index = 1;
  }
  global.state_change_debounce = 10;
}


if gamepad_button_check(0, gp_face1) {
  paused = false;
  if (current_state == paused_menu_states.resume) {
    room_goto(room_level1);
  } else if (current_state == paused_menu_states.exit_to_menu ){
    room_goto(room_main_menu);
  }
}

}
global.state_change_debounce--;

if global.points &lt; 0 {
  global.points = 0;
  audio_stop_all();
  room_goto(room_game_over);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(paused){
//    draw_sprite_ext(screenShot,0,0,0,1,1,0,c_white,1);
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
